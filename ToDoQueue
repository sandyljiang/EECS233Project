  package FinalProject;

//Sandy Jiang (sxj409) and Samantha Frankum (srf48)

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

import java.util.Scanner;



public class ToDoQueue

{
  //handles the queries and the talking between the program and user
  public static void main (String[] args) throws IOException
  {
    File file = new File("C:\\Users\\samor\\Documents\\NetBeansProjects\\SecondEECS233\\src\\FinalProject\\ClassList.txt");
      System.out.println("This is our list of classes that need to be taken");

    Scanner stdin = new Scanner(System.in);
    String expression;
    System.out.println("What major are you?");

    System.out.print("Your major: ");
    expression = stdin.nextLine( ).toUpperCase( );
    if (rightMajor(expression))
    {
      System.out.println("Wow a computer science major! We only support BS majors for software engineering track! ");
      query(stdin, "Is that okay?");
    }
    else
      System.out.println("That major is not supported by our code currently");

    
    Queue<String> queue = creatingQueue(file);
    do{
     System.out.print("Name 1 computer science class you have taken: ");
     expression = stdin.nextLine( ).toUpperCase( );
     if (removingClasses(expression, queue))
        System.out.println("Class removed from recommended class list!");
     else
        System.out.println("That's not a computer science class!");
    } 
    while (query(stdin, "Do you have another class?"));

    System.out.println("Thanks for letting us help! Here is your class list!");
    computeClassRecommendations(queue);
  }//end main

  //removes a specific string expression from the queue
  public static boolean removingClasses(String expression, Queue<String> queue){
      long start, end;
      if(queue.contains(expression)){
          start = System.currentTimeMillis();
          queue.remove(expression);
          end = System.currentTimeMillis();
          System.out.println("It took " + (end-start) + " milliseconds to finish last task");
          return true;
      }
      return false;
  }
  
  //queries the user and only excepts y or n
  public static boolean query(Scanner input, String prompt)
  {
    String answer;


System.out.print(prompt + " [Y or N]: ");
    answer = input.nextLine( ).toUpperCase( );

    while (!answer.startsWith("Y") && !answer.startsWith("N"))
    {
      System.out.print("Invalid response. Please type Y or N: ");
      answer = input.nextLine( ).toUpperCase( );
    }
    
    return answer.startsWith("Y");
  }//end query

  //confirms that major is computer science
  public static boolean rightMajor(String expression )
  {
    if(expression.equalsIgnoreCase("computer science"))
      return true;
    else
      return false;

  }

  //creates queue with list of classes from a file (file declared in main class)
  private static Queue<String> creatingQueue(File fin) throws IOException {

    FileInputStream fis = new FileInputStream(fin);
    Queue<String> queue = new LinkedList<String>();

    //Construct BufferedReader from InputStreamReader
    BufferedReader br = new BufferedReader(new InputStreamReader(fis));

    String line = null;
    while ((line = br.readLine()) != null) {
      queue.add(line);
    }

    br.close();
    return queue;

  }
 
 //prints the class recommendations and how long it took to compute
 public static void computeClassRecommendations(Queue<String> queue){
      Queue<String> temp = queue;
      long start, end;
      start = System.currentTimeMillis();
      while(temp.size() > 0 && temp.peek() != null)
          System.out.print(temp.remove() + ", ");
      end = System.currentTimeMillis();
      System.out.println("It took " + (end-start) + " milliseconds to finish last task");
  }

}
